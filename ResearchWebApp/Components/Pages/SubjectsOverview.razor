@page "/subjects"
@inject ISubjectService SubjectService
@inject NavigationManager NavigationManager
@using ResearchWebApp.DTOs
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="container py-5">
    <h3 class="mb-4 text-center text-primary">Subject Overview</h3>

    @if (subjects == null)
    {
        <div class="text-center">
            <p class="text-muted"><em>Loading Data...</em></p>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (subjects.Count == 0)
    {
        <p class="text-center text-muted"><em>No subjects available.</em></p>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var subject in subjects)
            {
                <div class="col">
                    <div class="card shadow border-0">
                        <div class="card-body">
                            <h5 class="card-title text-primary">@subject.SubjectName</h5>
                            <p class="card-subtitle mb-2 text-muted">Teacher: @subject.Teacher</p>
                            <hr />
                            <p class="card-text fw-bold">Class Schedule:</p>
                            <ul class="list-unstyled">
                                @foreach (var schedule in subject.Schedules)
                                {
                                    <li>@schedule.Day: @DisplayTime(schedule.StartTime) - @DisplayTime(schedule.EndTime)</li>
                                }
                            </ul>
                        </div>
                        <div class="card-footer d-flex justify-content-between align-items-center">
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => EditSubject(subject.Id)">
                                <i class="bi bi-pencil-square me-1"></i>Edit
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => SubjectFiles(subject.Id)">
                                <i class="bi bi-folder2-open me-1"></i>Files
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteSubject(subject.Id)">
                                <i class="bi bi-trash3 me-1"></i>Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="text-center mt-5">
            <button class="btn btn-primary btn-lg" @onclick="AddSubject">
                <i class="bi bi-plus-circle me-2"></i>Add New Subject
            </button>
        </div>
    }
</div>

@code {
    private List<Subject> subjects;
    private bool showFileUpload = false;
    private int selectedSubjectId;
    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // Simulate loading
        subjects = await SubjectService.GetAllSubjectsWithDetailsAsync();
    }

    void NavigateToSubjectDetails(int id)
    {
        
    }

    void EditSubject(int id)
    {
        NavigationManager.NavigateTo($"/edit-subject/{id}");
    }

    void SubjectFiles(int id)
    {
        NavigationManager.NavigateTo($"/subject-details/{id}");
    }

    void AddSubject()
    {
        NavigationManager.NavigateTo("/edit-subject");
    }

    async Task DeleteSubject(int id)
    {
        await SubjectService.DeleteSubjectAsync(id);
        subjects = await SubjectService.GetAllSubjectsWithDetailsAsync();
    }

    string DisplayTime(string? time)
    {
        if (!string.IsNullOrEmpty(time) && TimeSpan.TryParse(time, out TimeSpan parsedTime))
        {
            return DateTime.Today.Add(parsedTime).ToString("hh:mm tt");
        }
        return time ?? "Invalid Time";
    }
}
