@page "/view-reviewer/{fileName}/{id:int}/{subjectFileId:int}"
@inject NavigationManager Navigation
@inject IRelatedLiteratureService RelatedLiteratureService
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using System.IO
@using DocumentFormat.OpenXml.Packaging
@using Microsoft.AspNetCore.Components

<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="text-primary">
            <i class="bi bi-file-earmark-text me-2"></i>Reviewer Document: @Path.GetFileNameWithoutExtension(fileName)
        </h3>

        <button class="btn btn-outline-secondary btn-sm" @onclick="GoBack">
            <i class="bi bi-arrow-left me-1"></i>Manage Files
        </button>
    </div>
    <hr />

    <div class="row">
        <!-- Main Content Section (File Content) -->
        <div class="col-md-8">
            @if (!string.IsNullOrEmpty(fileContent))
            {
                <div class="card shadow-sm border-0">
                    <div class="card-body">
                        @if (fileName.EndsWith(".html"))
                        {
                            <div>@((MarkupString)fileContent)</div> <!-- Render HTML content -->
                        }
                        else
                        {
                            <pre class="bg-light p-3 rounded">@fileContent</pre> <!-- Render plain text content -->
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-circle-fill me-2"></i>No content available or unable to load the file.
                </div>
            }
        </div>

        <!-- Sidebar Section (Related Literature) -->
        <div class="col-md-4">
            <div class="card shadow-sm border-0" style="max-height: 90vh; overflow-y: auto;">
                <div class="card-header bg-primary text-white">
                    <h5 class="m-0"><i class="bi bi-bookmarks me-2"></i>Related Literature</h5>
                </div>
                <div class="card-body">
                    @if (relatedLiterature.Any())
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var literature in relatedLiterature)
                            {
                                <li class="list-group-item">
                                    <a href="@literature.Link" target="_blank" class="text-decoration-none">
                                        <i class="bi bi-link-45deg me-2"></i>@literature.Title
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No related literature available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string fileName { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int SubjectFileId { get; set; }

    private string fileContent;
    private List<RelatedLiterature> relatedLiterature = new List<RelatedLiterature>();

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            LoadFileContent();
            await LoadRelatedLiterature();
        }
        else
        {
            fileContent = "No file ID provided.";
        }
    }

    private void LoadFileContent()
    {
        try
        {
            string filePath = Path.Combine("Reviewer", fileName);
            if (File.Exists(filePath))
            {
                if (fileName.EndsWith(".docx"))
                {
                    // Load DOCX content
                    using (var stream = File.OpenRead(filePath))
                    using (var wordDoc = WordprocessingDocument.Open(stream, false))
                    {
                        var body = wordDoc.MainDocumentPart.Document.Body;
                        fileContent = body != null ? ConvertDocxToHtml(body) : "No content available in the document.";
                    }
                }
                else if (fileName.EndsWith(".html"))
                {
                    // Load HTML content
                    fileContent = File.ReadAllText(filePath);
                }
            }
            else
            {
                fileContent = $"File '{fileName}' not found.";
            }
        }
        catch (Exception ex)
        {
            fileContent = $"Error loading file: {ex.Message}";
        }
    }

    private string ConvertDocxToHtml(OpenXmlElement body)
    {
        string htmlContent = "<div>";
        foreach (var paragraph in body.Elements<DocumentFormat.OpenXml.Wordprocessing.Paragraph>())
        {
            htmlContent += $"<p>{paragraph.InnerText}</p>";
        }
        htmlContent += "</div>";
        return htmlContent;
    }

    private async Task LoadRelatedLiterature()
    {
        relatedLiterature = await RelatedLiteratureService.GetRelatedLiteratureBySubjectFileId(SubjectFileId);
    }

    private void GoBack()
    {
        if (Id > 0)
        {
            Navigation.NavigateTo($"/subject-files/{Id}");
        }
        else
        {
            Navigation.NavigateTo("/subject-files");
        }
    }
}
