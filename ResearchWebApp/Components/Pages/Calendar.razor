@page "/calendar"
@using Syncfusion.Blazor.Schedule
@inject NavigationManager UriHelper
@inject IStudySessionService StudySessionService
@inject ISubjectService SubjectService
@inject IExamScheduleService ExamScheduleService
@inject ILogger<Calendar> Logger
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="container my-5">
    <h1 class="text-center mb-4">Calendar</h1>
    <hr />

    <div class="col-lg-12">
        <SfSchedule TValue="ScheduleEvent" Height="650px" @bind-SelectedDate="@CurrentDate" @bind-CurrentView="@CurrentView">
            <ScheduleEventSettings DataSource="@FilteredEvents"></ScheduleEventSettings>
            <ScheduleViews>
                <ScheduleView Option="Syncfusion.Blazor.Schedule.View.Month" DisplayName="Month"></ScheduleView>
                <ScheduleView Option="Syncfusion.Blazor.Schedule.View.TimelineDay" DisplayName="Day"></ScheduleView>
                <ScheduleView Option="Syncfusion.Blazor.Schedule.View.TimelineWeek" DisplayName="Week"></ScheduleView>
            </ScheduleViews>
        </SfSchedule>
    </div>
</div>

@code {
    private DateTime CurrentDate { get; set; } = DateTime.Today;
    private Syncfusion.Blazor.Schedule.View CurrentView { get; set; } = Syncfusion.Blazor.Schedule.View.TimelineDay;
    private List<ScheduleEvent> AllEvents { get; set; } = new List<ScheduleEvent>();
    private List<ScheduleEvent> FilteredEvents { get; set; } = new List<ScheduleEvent>();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        FilterEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var studySessions = await StudySessionService.GetAllStudySessionsAsync();
            var examSchedules = await ExamScheduleService.GetAllExamSchedulesAsync();
            var subjects = await SubjectService.GetAllSubjectsAsync();

            // Log fetched data
            Logger.LogInformation($"Fetched {studySessions.Count} study sessions, {examSchedules.Count} exam schedules, and {subjects.Count} subjects.");

            // Add study sessions
            AllEvents.AddRange(studySessions.Select(ss => new ScheduleEvent
                {
                    Id = ss.Id,
                    Subject = ss.Subject?.SubjectName ?? "Unknown Subject",
                    StartTime = CombineDateAndTime(ss.SessionDate, ss.StartTime),
                    EndTime = CombineDateAndTime(ss.SessionDate, ss.EndTime),
                    CategoryColor = "#0000FF" // Blue for study sessions
                }));

            // Add exam schedules
            AllEvents.AddRange(examSchedules.Select(es => new ScheduleEvent
                {
                    Id = es.Id,
                    Subject = es.Subject?.SubjectName ?? "Unknown Subject",
                    StartTime = CombineDateAndTime(es.ExamDate, es.StartTime),
                    EndTime = CombineDateAndTime(es.ExamDate, es.EndTime),
                    CategoryColor = "#FF0000" // Red for exams
                }));

            // Add recurring subject schedules
            foreach (var subject in subjects)
            {
                foreach (var schedule in subject.Schedules)
                {
                    DateTime nextScheduleDate = Next(DateTime.Today, schedule.Day);
                    for (int i = 0; i < 52; i++) // Generate events for 1 year
                    {
                        AllEvents.Add(new ScheduleEvent
                            {
                                Id = schedule.Id,
                                Subject = subject.SubjectName ?? "Unknown Subject",
                                StartTime = CombineDateAndTime(nextScheduleDate, schedule.StartTime),
                                EndTime = CombineDateAndTime(nextScheduleDate, schedule.EndTime),
                                RecurrenceRule = $"FREQ=WEEKLY;BYDAY={schedule.Day.ToString().Substring(0, 2).ToUpper()}",
                                CategoryColor = "#808080" // Gray for recurring schedules
                            });
                        nextScheduleDate = nextScheduleDate.AddDays(7);
                    }
                }
            }

            // Log added events
            Logger.LogInformation($"Added {AllEvents.Count} events.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading events.");
        }
    }

    private void FilterEvents()
    {
        FilteredEvents = CurrentView switch
        {
            Syncfusion.Blazor.Schedule.View.TimelineDay => AllEvents.Where(e => e.CategoryColor == "#0000FF").ToList(), // Study sessions
            Syncfusion.Blazor.Schedule.View.Month => AllEvents.Where(e => e.CategoryColor != "#0000FF").ToList(), // Exams & recurring schedules
            Syncfusion.Blazor.Schedule.View.TimelineWeek => AllEvents, // All events
            _ => AllEvents
        };

        // Log filtered events
        Logger.LogInformation($"Filtered {FilteredEvents.Count} events for {CurrentView} view.");
    }

    private static DateTime Next(DateTime date, DayOfWeek targetDay)
    {
        int daysToAdd = ((int)targetDay - (int)date.DayOfWeek + 7) % 7;
        return date.AddDays(daysToAdd);
    }

    private DateTime CombineDateAndTime(DateTime date, string time)
    {
        if (DateTime.TryParseExact(time, new[] { "HH:mm", "h:mm tt", "H:mm" }, null, System.Globalization.DateTimeStyles.None, out DateTime parsedTime))
        {
            return date.Add(parsedTime.TimeOfDay);
        }

        Logger.LogError($"Invalid time format: {time}");
        throw new FormatException($"Invalid time format: {time}");
    }

    public class ScheduleEvent
    {
        public int Id { get; set; }
        public string Subject { get; set; } = "Unknown Subject";
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string CategoryColor { get; set; } = "#808080";
        public string RecurrenceRule { get; set; } = "";
    }
}
