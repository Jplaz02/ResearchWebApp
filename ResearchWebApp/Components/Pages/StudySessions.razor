@page "/study-sessions"
@inject ISubjectService SubjectService
@inject IStudySessionService StudySessionService
@inject ILogger<StudySessions> Logger
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="container py-5">
    <div class="mb-4 text-center">
        <h3 class="text-primary"><i class="bi bi-calendar-event me-2"></i>Study Sessions</h3>
    </div>

    <!-- Preferred Study Time Selection -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <label for="preferredTime" class="form-label">Preferred Study Time:</label>
            <InputSelect id="preferredTime" class="form-select mb-3" @bind-Value="PreferredTime">
                <option value="1">Morning</option>
                <option value="2">Afternoon</option>
                <option value="3">Evening</option>
            </InputSelect>
            <button class="btn btn-outline-primary" @onclick="GenerateStudySessions">
                <i class="bi bi-clock-history me-1"></i>Generate Study Sessions
            </button>
        </div>
    </div>

    <!-- Subject Filter -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <label for="subjectFilter" class="form-label">Filter by Subject:</label>
            <InputSelect id="subjectFilter" class="form-select" @bind-Value="SelectedSubjectId" @onchange="LoadStudySessions">
                <option value="0">All Subjects</option>
                @foreach (var subject in subjects)
                {
                    <option value="@subject.Id">@subject.SubjectName</option>
                }
            </InputSelect>
        </div>
    </div>

    <!-- Study Sessions and Details -->
    <div class="mt-4">
        @if (SelectedSubjectId == 0)
        {
            <!-- Display all subjects -->
            @foreach (var subject in subjects)
            {
                <div class="card shadow-sm mb-3">
                    <div class="card-body">
                        <h5 class="card-title text-primary">@subject.SubjectName</h5>
                        <p class="card-text"><strong>Priority Level:</strong> @subject.ExamSchedules.FirstOrDefault()?.Priority.ToString()</p>
                        <p class="card-text">
                            <strong>Exam Schedule:</strong>
                            <ul class="list-unstyled">
                                @foreach (var examSchedule in subject.ExamSchedules)
                                {
                                    <li><i class="bi bi-calendar3 me-2"></i>@examSchedule.ExamDate.ToString("MM/dd/yyyy") @DisplayTime(examSchedule.StartTime) - @DisplayTime(examSchedule.EndTime)</li>
                                }
                            </ul>
                        </p>
                        <p class="card-text"><strong>Session Starts:</strong> @DisplayDate(subject.StudySessions.FirstOrDefault()?.SessionDate)</p>
                        <p class="card-text"><strong>Session Ends:</strong> @DisplayDate(subject.StudySessions.LastOrDefault()?.SessionDate)</p>
                    </div>
                </div>
            }

            <!-- Display generated study sessions -->
            <div class="mt-4">
                <h4 class="text-secondary">Generated Study Sessions:</h4>
                @foreach (var dateGroup in studySessions.GroupBy(ss => ss.SessionDate))
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-body">
                            <h6 class="text-primary">@dateGroup.Key.ToString("MM/dd/yyyy")</h6>
                            <ul class="list-unstyled">
                                @foreach (var session in dateGroup)
                                {
                                    <li><i class="bi bi-book me-2"></i>@session.Subject.SubjectName - @DisplayTime(session.StartTime) to @DisplayTime(session.EndTime)</li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Display filtered subject -->
            var selectedSubject = subjects.FirstOrDefault(s => s.Id == SelectedSubjectId);
            if (selectedSubject != null)
            {
                <div class="card shadow-sm mb-3">
                    <div class="card-body">
                        <h5 class="card-title text-primary">@selectedSubject.SubjectName</h5>
                        <p class="card-text"><strong>Priority Level:</strong> @selectedSubject.ExamSchedules.FirstOrDefault()?.Priority.ToString()</p>
                        <p class="card-text">
                            <strong>Exam Schedule:</strong>
                            <ul class="list-unstyled">
                                @foreach (var examSchedule in selectedSubject.ExamSchedules)
                                {
                                    <li><i class="bi bi-calendar3 me-2"></i>@examSchedule.ExamDate.ToString("MM/dd/yyyy") @DisplayTime(examSchedule.StartTime) - @DisplayTime(examSchedule.EndTime)</li>
                                }
                            </ul>
                        </p>
                        <p class="card-text"><strong>Session Starts:</strong> @DisplayDate(selectedSubject.StudySessions.FirstOrDefault()?.SessionDate)</p>
                        <p class="card-text"><strong>Session Ends:</strong> @DisplayDate(selectedSubject.StudySessions.LastOrDefault()?.SessionDate)</p>
                    </div>
                </div>

                <!-- Display filtered study sessions -->
                <div class="mt-4">
                    <h4 class="text-secondary">Generated Study Sessions:</h4>
                    @foreach (var dateGroup in studySessions.Where(ss => ss.SubjectId == SelectedSubjectId).GroupBy(ss => ss.SessionDate))
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-body">
                                <h6 class="text-primary">@dateGroup.Key.ToString("MM/dd/yyyy")</h6>
                                <ul class="list-unstyled">
                                    @foreach (var session in dateGroup)
                                    {
                                        <li><i class="bi bi-book me-2"></i>@session.Subject.SubjectName - @DisplayTime(session.StartTime) to @DisplayTime(session.EndTime)</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    private List<Subject> subjects = new();
    private List<StudySession> studySessions = new();
    private int PreferredTime { get; set; } = 1; // Default to Morning
    private int SelectedSubjectId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        subjects = await SubjectService.GetAllSubjectsAsync();
        studySessions = await StudySessionService.GetAllStudySessionsAsync();
    }

    private async Task GenerateStudySessions()
    {
        try
        {
            studySessions = await StudySessionService.GenerateStudySessionsAsync(PreferredTime);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating study sessions");
        }
    }

    private async Task LoadStudySessions()
    {
        if (SelectedSubjectId == 0)
        {
            studySessions = await StudySessionService.GetAllStudySessionsAsync();
        }
        else
        {
            studySessions = await StudySessionService.GetStudySessionsBySubjectIdAsync(SelectedSubjectId);
        }
    }

    private string DisplayExam(ExamSchedule? examSchedule)
    {
        if (examSchedule != null)
        {
            return $"{examSchedule.ExamDate:MM/dd/yyyy} {DisplayTime(examSchedule.StartTime)} - {DisplayTime(examSchedule.EndTime)}";
        }
        return "No upcoming exam scheduled";
    }

    private string DisplayDate(DateTime? date) => date?.ToString("MM/dd/yyyy") ?? "N/A";

    private string DisplayTime(string? time)
    {
        if (!string.IsNullOrEmpty(time) && TimeSpan.TryParse(time, out TimeSpan parsedTime))
        {
            return DateTime.Today.Add(parsedTime).ToString("hh:mm tt");
        }
        return time ?? "Invalid Time";
    }
}
