@page "/edit-exam-schedule"
@page "/edit-exam-schedule/{Id:int}"
@inject IExamScheduleService ExamScheduleService
@inject ISubjectService SubjectService
@inject SubjectStateService SubjectStateService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="container my-5">
    <h1 class="text-center mb-4">
        @(Id is null ? $"Add Exam Schedule for {CurrentSubject?.SubjectName}" : $"Edit Exam Schedule for {CurrentSubject?.SubjectName}")
    </h1>
    <hr />

    <EditForm Model="CurrentExamSchedule" OnValidSubmit="HandleExamScheduleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (CurrentSubject != null)
        {
            <div class="mb-3">
                <label class="form-label">Subject:</label>
                <p class="form-control-plaintext">@CurrentSubject.SubjectName</p>
            </div>
        }

        <div class="mb-3">
            <label for="examDate" class="form-label">Exam Date:</label>
            <InputDate id="examDate" class="form-control" @bind-Value="CurrentExamSchedule.ExamDate" />
            <ValidationMessage For="@(() => CurrentExamSchedule.ExamDate)" />
        </div>
        <div class="mb-3">
            <label for="startTime" class="form-label">Start Time:</label>
            <InputText id="startTime" type="time" class="form-control" @bind-Value="CurrentExamSchedule.StartTime" />
            <ValidationMessage For="@(() => CurrentExamSchedule.StartTime)" />
        </div>
        <div class="mb-3">
            <label for="endTime" class="form-label">End Time:</label>
            <InputText id="endTime" type="time" class="form-control" @bind-Value="CurrentExamSchedule.EndTime" />
            <ValidationMessage For="@(() => CurrentExamSchedule.EndTime)" />
        </div>
        <div class="mb-3">
            <label for="priority" class="form-label">Priority:</label>
            <InputSelect id="priority" class="form-select" @bind-Value="CurrentExamSchedule.Priority">
                @foreach (PriorityLevel priority in Enum.GetValues(typeof(PriorityLevel)))
                {
                    <option value="@priority">@priority.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentExamSchedule.Priority)" />
        </div>

        <button type="submit" class="btn btn-primary w-100">
            @(Id is null ? "Add Schedule" : "Update Schedule")
        </button>
    </EditForm>

    @if (examSchedules.Any())
    {
        <h2 class="mt-5">Exam Schedules for @CurrentSubject?.SubjectName</h2>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mt-3">
            @foreach (var schedule in examSchedules)
            {
                <div class="col">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <h5 class="card-title">@schedule.ExamDate.ToShortDateString()</h5>
                            <p><strong>Start Time:</strong> @schedule.StartTime</p>
                            <p><strong>End Time:</strong> @schedule.EndTime</p>
                            <p><strong>Priority:</strong> @schedule.Priority.ToString()</p>
                        </div>
                        <div class="card-footer d-flex justify-content-between">
                            <button class="btn btn-primary btn-sm" @onclick="() => EditSchedule(schedule.Id)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteSchedule(schedule.Id)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    }

</div>

@code {
    [Parameter] public int? Id { get; set; }

    private ExamSchedule CurrentExamSchedule { get; set; } = new ExamSchedule();
    private Subject CurrentSubject { get; set; }
    private List<ExamSchedule> examSchedules = new List<ExamSchedule>();

    protected override async Task OnInitializedAsync()
    {
        var subjectId = SubjectStateService.GetCurrentSubjectId();
        if (!subjectId.HasValue)
        {
            NavigationManager.NavigateTo("/subjects");
            return;
        }

        CurrentSubject = await SubjectService.GetSubjectsByIdAsync(subjectId.Value);

        if (Id is not null)
        {
            CurrentExamSchedule = await ExamScheduleService.GetExamScheduleByIdAsync(Id.Value) ?? new ExamSchedule();
        }
        else
        {
            CurrentExamSchedule.SubjectId = subjectId.Value;
        }

        examSchedules = await ExamScheduleService.GetExamSchedulesBySubjectIdAsync(subjectId.Value);
    }

    private async Task HandleExamScheduleSubmit()
    {
        if (Id is null)
        {
            await ExamScheduleService.AddExamScheduleAsync(CurrentExamSchedule);
        }
        else
        {
            await ExamScheduleService.UpdateExamScheduleAsync(CurrentExamSchedule);
        }
        NavigationManager.NavigateTo($"/subject-details/{CurrentSubject.Id}");
    }

    private void EditSchedule(int id)
    {
        NavigationManager.NavigateTo($"/edit-exam-schedule/{id}");
    }

    private async Task DeleteSchedule(int id)
    {
        await ExamScheduleService.DeleteExamScheduleAsync(id);
        examSchedules = await ExamScheduleService.GetExamSchedulesBySubjectIdAsync(CurrentSubject.Id);
        StateHasChanged();
    }
}
