@page "/subject-details/{Id:int}"
@inject SubjectStateService SubjectStateService
@inject ISubjectService SubjectService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="d-flex">
    <!-- Sidebar -->
    <div class="card shadow-sm border-0" style="width: 18rem; height: 100vh;">
        <div class="card-header bg-primary text-white text-center">
            <h5 class="m-0">Subject Navigation</h5>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <NavLink class="nav-link text-dark" href="@($"/subject-details/{Id}")" active-class="fw-bold">
                    <i class="bi bi-info-circle-fill me-2"></i>Subject Details
                </NavLink>
            </li>
            <li class="list-group-item">
                <NavLink class="nav-link text-dark" href="@($"/subject-files/{Id}")" active-class="fw-bold">
                    <i class="bi bi-folder-fill me-2"></i>Subject Files
                </NavLink>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="content flex-grow-1 p-4">
        @if (CurrentSubject != null)
        {
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="text-primary">@CurrentSubject.SubjectName</h3>
                <button class="btn btn-outline-primary btn-sm" @onclick="ManageExam">
                    <i class="bi bi-calendar-event me-1"></i>Manage Exam
                </button>
            </div>
            <hr />
            <p><strong>Description:</strong> @CurrentSubject.SubjectDescription</p>
            <p><strong>Teacher:</strong> @CurrentSubject.Teacher</p>

            <div class="mt-4">
                <h4 class="text-secondary">Schedules:</h4>
                @if (CurrentSubject.Schedules.Any())
                {
                    <ul class="list-unstyled">
                        @foreach (var schedule in CurrentSubject.Schedules)
                        {
                            <li>
                                <i class="bi bi-clock me-2"></i>
                                <strong>@schedule.Day:</strong> @DisplayTime(schedule.StartTime) - @DisplayTime(schedule.EndTime)
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">No schedules found.</p>
                }
            </div>

            <div class="mt-4">
                <h4 class="text-secondary">Upcoming Exams:</h4>
                @if (CurrentSubject.ExamSchedules.Any())
                {
                    <ul class="list-unstyled">
                        @foreach (var exam in CurrentSubject.ExamSchedules)
                        {
                            <li>
                                <i class="bi bi-calendar3 me-2"></i>
                                @exam.ExamDate.ToShortDateString() - @DisplayTime(exam.StartTime) to @DisplayTime(exam.EndTime)
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">No upcoming exams.</p>
                }
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center align-items-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="ms-3">Loading subject details...</p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }  // This gets the subject ID from the route.
    public Subject CurrentSubject { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentSubject = await SubjectService.GetSubjectsByIdAsync(Id); // Get the subject by ID.
    }

    string DisplayTime(string? time)
    {
        if (!string.IsNullOrEmpty(time) && TimeSpan.TryParse(time, out TimeSpan parsedTime))
        {
            return DateTime.Today.Add(parsedTime).ToString("hh:mm tt");
        }
        return time ?? "Invalid Time";
    }

    void ManageExam()
    {
        SubjectStateService.SetCurrentSubjectId(Id); // Store the current subject ID.
        NavigationManager.NavigateTo("/edit-exam-schedule"); // Navigate to the edit exam schedule page.
    }
}
